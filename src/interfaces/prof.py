import streamlit as st
from datetime import datetime
from typing import List, Dict
from decimal import Decimal
from uuid import uuid4, UUID
from src.crud import SupplierManager, PurchaseRequestManager
from src.models import PurchaseRequest, PurchaseRequestItem

class PROFInterface:
    def __init__(self):
        self.supplier_manager = SupplierManager()
        self.pr_manager = PurchaseRequestManager()
        
    def _get_suppliers(self):
        return self.supplier_manager.get_suppliers()
        
    def _get_item_count(self) -> int:
        if 'item_count' not in st.session_state:
            st.session_state.item_count = 1
        return st.session_state.item_count
        
    def _increase_items(self):
        st.session_state.item_count += 1
        
    def _decrease_items(self):
        if st.session_state.item_count > 1:
            st.session_state.item_count -= 1
    
    def _handle_prof_submission(
        self,
        requestor: str,
        department: str,
        date: datetime,
        urgency: str,
        supplier: Dict,
        items: List[Dict]
    ) -> bool:
        try:
            # Create a temporary UUID for purchase request items
            temp_pr_id = uuid4()
            
            # Create purchase request items
            pr_items = []
            total_amount = Decimal('0')
            
            for item in items:
                quantity = Decimal(str(item['quantity']))
                unit_price = Decimal(str(item['price']))
                total_price = quantity * unit_price
                total_amount += total_price
                
                pr_items.append(PurchaseRequestItem(
                    item_description=item['description'],
                    quantity=quantity,
                    unit=item['unit'],
                    unit_price=unit_price,
                    total_price=total_price,
                    account_code=None,  # We'll add account code functionality later
                    purchase_request_id=temp_pr_id  # Use temporary ID
                ))
            
            # Create purchase request
            purchase_request = PurchaseRequest(
                form_number="",  # Will be generated by the manager
                requestor_id=UUID(st.session_state.user['id']),  # Convert string UUID to UUID object
                supplier_id=UUID(supplier['id']),  # Convert string UUID to UUID object
                status='pending',
                total_amount=total_amount,
                remarks=f"Urgency: {urgency}",
                items=pr_items
            )
            
            # Save to database
            created_pr = self.pr_manager.create_purchase_request(purchase_request)
            
            if created_pr:
                st.success(f"PROF #{created_pr.form_number} created successfully!")
                return True
                
            return False
            
        except Exception as e:
            st.error(f"Error creating PROF: {str(e)}")
            return False
    
    def render(self):
        st.warning("This interface has been deprecated. Please use the new Purchase Request Form under the Forms section.")
        st.stop()
        
        # Initialize session state
        if 'show_prof_review' not in st.session_state:
            st.session_state.show_prof_review = False
        
        st.title("Purchase Request and Order Form (PROF)")
        
        # Basic Information
        col1, col2, col3 = st.columns(3)
        with col1:
            requestor = st.text_input("Requestor", value=st.session_state.user['profile'].get('full_name', ''), disabled=True)
        with col2:
            department = st.text_input("Department", value=st.session_state.user['profile'].get('department', ''), disabled=True)
        with col3:
            date = st.date_input("Date", datetime.now())
        
        # Supplier Selection
        suppliers = self._get_suppliers()
        if suppliers:
            supplier_names = {s['name']: s for s in suppliers}
            selected_supplier = st.selectbox("Select Supplier", options=list(supplier_names.keys()))
            supplier = supplier_names[selected_supplier]
        else:
            st.warning("No suppliers found. Please add suppliers first.")
            return
        
        # Urgency
        urgency = st.selectbox("Urgency", ["Normal", "Urgent", "Very Urgent"])
        
        # Items Form
        with st.form("prof_items_form"):
            st.subheader("Items")
            items = []
            total_amount = Decimal('0')
            
            for i in range(self._get_item_count()):
                st.markdown(f"##### Item {i + 1}")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    description = st.text_input(f"Description", key=f"desc_{i}")
                with col2:
                    quantity = st.number_input(f"Quantity", min_value=1, value=1, key=f"qty_{i}")
                with col3:
                    unit = st.text_input(f"Unit", key=f"unit_{i}")
                with col4:
                    price = st.number_input(f"Unit Price", min_value=0.0, value=0.0, key=f"price_{i}")
                
                if all([description, quantity, unit, price]):
                    item_total = Decimal(str(quantity * price))
                    total_amount += item_total
                    items.append({
                        'description': description,
                        'quantity': quantity,
                        'unit': unit,
                        'price': price,
                        'total': item_total
                    })
                    st.write(f"Item Total: ₱{item_total:,.2f}")
            
            # Display grand total
            st.markdown(f"### Grand Total: ₱{total_amount:,.2f}")
            
            col1, col2, col3 = st.columns([1, 1, 2])
            with col1:
                if st.form_submit_button("Add Item"):
                    self._increase_items()
                    st.rerun()
            with col2:
                if st.form_submit_button("Remove Item"):
                    self._decrease_items()
                    st.rerun()
            with col3:
                review_button = st.form_submit_button("Review PROF")
                if review_button:
                    if not items:
                        st.error("Please add at least one item")
                        return
                    
                    # Store form data in session state for review
                    st.session_state.prof_review = {
                        'requestor': requestor,
                        'department': department,
                        'date': date,
                        'urgency': urgency,
                        'supplier': supplier,
                        'items': items,
                        'total_amount': total_amount
                    }
                    st.session_state.show_prof_review = True
                    st.rerun()
        
        # Review Section
        if st.session_state.get('show_prof_review'):
            st.markdown("---")
            st.subheader("Review Purchase Request")
            review_data = st.session_state.prof_review
            
            col1, col2 = st.columns(2)
            with col1:
                st.write("### Basic Information")
                st.write(f"Requestor: {review_data['requestor']}")
                st.write(f"Department: {review_data['department']}")
                st.write(f"Date: {review_data['date']}")
                st.write(f"Urgency: {review_data['urgency']}")
                st.write(f"Supplier: {review_data['supplier']['name']}")
            
            with col2:
                st.write("### Summary")
                st.write(f"Total Items: {len(review_data['items'])}")
                st.write(f"Total Amount: ₱{review_data['total_amount']:,.2f}")
            
            st.write("### Items")
            for idx, item in enumerate(review_data['items'], 1):
                st.markdown(f"""
                **Item {idx}**: {item['description']}
                - Quantity: {item['quantity']} {item['unit']}
                - Unit Price: ₱{item['price']:,.2f}
                - Total: ₱{item['total']:,.2f}
                """)
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Edit"):
                    st.session_state.show_prof_review = False
                    st.rerun()
            with col2:
                if st.button("Confirm and Submit"):
                    success = self._handle_prof_submission(
                        requestor=review_data['requestor'],
                        department=review_data['department'],
                        date=review_data['date'],
                        urgency=review_data['urgency'],
                        supplier=review_data['supplier'],
                        items=review_data['items']
                    )
                    
                    if success:
                        # Reset form
                        st.session_state.item_count = 1
                        st.session_state.show_prof_review = False
                        st.session_state.pop('prof_review', None)
                        st.rerun()
